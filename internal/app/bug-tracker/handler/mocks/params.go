// Code generated by MockGen. DO NOT EDIT.
// Source: params.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockParams is a mock of Params interface.
type MockParams struct {
	ctrl     *gomock.Controller
	recorder *MockParamsMockRecorder
}

// MockParamsMockRecorder is the mock recorder for MockParams.
type MockParamsMockRecorder struct {
	mock *MockParams
}

// NewMockParams creates a new mock instance.
func NewMockParams(ctrl *gomock.Controller) *MockParams {
	mock := &MockParams{ctrl: ctrl}
	mock.recorder = &MockParamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParams) EXPECT() *MockParamsMockRecorder {
	return m.recorder
}

// GetIdParam mocks base method.
func (m *MockParams) GetIdParam(c echo.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdParam", c)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdParam indicates an expected call of GetIdParam.
func (mr *MockParamsMockRecorder) GetIdParam(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdParam", reflect.TypeOf((*MockParams)(nil).GetIdParam), c)
}

// GetUsernameParam mocks base method.
func (m *MockParams) GetUsernameParam(c echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernameParam", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernameParam indicates an expected call of GetUsernameParam.
func (mr *MockParamsMockRecorder) GetUsernameParam(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameParam", reflect.TypeOf((*MockParams)(nil).GetUsernameParam), c)
}
